scriptencoding utf-8
set nocompatible

"
" Plugins
"
call plug#begin()
function! DoYouCompleteMe(info)
  let l:args = 'install.py --clang-completer{{#go}} --gocode-completer{{/go}}{{#js}} --tern-completer{{/js}}{{#rust}} --racer-completer{{/rust}}{{#dotnet}} --omnisharp-completer{{/dotnet}}'
  if a:info.status == 'installed' || a:info.force
    if has('win32')
      exec 'silent !git -C ./third_party/ycmd apply ' . $USERPROFILE . '/vimfiles/patches/ycmd-omnisharp-x64.patch'
      exec 'silent !git -C ./third_party/ycmd apply ' . $USERPROFILE . '/vimfiles/patches/ycmd-VS2017.patch'
      exec 'silent !python ' . l:args . ' --msvc=15'
    else
      exec 'silent !sh -c ''exec `command -v python2 || command -v python` ' . l:args . ''''
    endif
  endif
endfunction
Plug 'tpope/vim-sensible'
Plug 'editorconfig/editorconfig-vim'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'vim-syntastic/syntastic'
Plug 'Valloric/YouCompleteMe', { 'do': function('DoYouCompleteMe') }
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-dispatch'
Plug 'Raimondi/delimitMate'
Plug 'NLKNguyen/papercolor-theme'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'quabug/vim-gdscript'
Plug 'cespare/vim-toml'
Plug 'protomouse/systemd.vim'

{{#go}}
Plug 'fatih/vim-go', { 'do': ':exec ''GoInstallBinaries'' \| :silent !gometalinter --install' }
{{/go}}

{{#js}}
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
{{/js}}

{{#rust}}
Plug 'rust-lang/rust.vim'
{{/rust}}

{{#dotnet}}
Plug 'OmniSharp/omnisharp-vim', { 'do': (has('win32') ? 'msbuild' : 'xbuild') . ' ./server/OmniSharp.sln /p:Platform=\"Any CPU\"' }
{{/dotnet}}
call plug#end()


"
" Base
"
set number
set tabstop=4 shiftwidth=4
set completeopt-=preview
set hidden noautowrite
set listchars=tab:»\ ,extends:›,precedes:‹,space:·,trail:·,eol:¬
set list

if has("gui_running")
  set clipboard=unnamed,unnamedplus
  set guioptions-=l
  set guioptions-=L
  set guioptions-=r
  set guioptions-=R
  set guioptions-=T
  set guioptions-=m
  set background=light
  colorscheme PaperColor

  if has("gui_win32")
    set guifont=Powerline\ Consolas:h11
  elseif has("gui_macvim")
    set guifont=Monaco\ for\ Powerline:h12
  elseif has("gui_gtk")
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 10
  endif
endif


"
" NERDTree
"
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeIgnore = ['\~$', '\.swp$', '\.pyc$']
map <C-n> :NERDTreeToggle<CR>


"
" CtrlP
"
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_user_command = 'ag -l --nocolor -g "" %s'


"
" Tagbar
"
nmap <F8> :TagbarToggle<CR>


"
" syntastic
"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_enable_highlighting = 1
let g:syntastic_enable_signs = 1


"
" YouCompleteMe
"
let g:ycm_confirm_extra_conf = 0


"
" UltiSnips
"
let g:UltiSnipsExpandTrigger = '<c-j>'
let g:UltiSnipsJumpForwardTrigger = '<c-b>'
let g:UltiSnipsJumpBackwardTrigger = '<c-z>'


"
" airline
"
if has("gui_running")
  let g:airline_theme = 'papercolor'
  let g:airline_powerline_fonts = 1
endif


"
" GDScript
"
let g:ycm_semantic_triggers = { 'gdscript': ['.'] }
let g:tagbar_type_gdscript = {
\ 'ctagstype': 'gdscript',
\ 'kinds': [
\   'c:constants',
\   'e:exports',
\   'o:onready',
\   'p:preloads',
\   's:signals',
\   'f:functions',
\ ]
\}


{{#go}}
"
" Go
"
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1
let g:syntastic_go_checkers = ['gometalinter']
let g:syntastic_go_gometalinter_args = '--disable=gotype --fast'
{{/go}}


{{#js}}
"
" JavaScript
"
let g:jsx_ext_required = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exec = 'eslint_d'
{{/js}}


{{#java}}
"
" Java
"
let g:EclimCompletionMethod = 'omnifunc'
nmap <leader>ji :JavaImport<CR>
nmap <leader>jr :JavaRename<CR>
nmap <leader>jc :JavaCorrect<CR>
nmap <leader>jg :JavaGet<CR>
nmap <leader>js :JavaSet<CR>
nmap <leader>jgs :JavaGetSet<CR>
nmap <leader>jsc :JavaSearchContext<CR>
{{/java}}


{{#rust}}
"
" Rust
"
let g:syntastic_rust_checkers = ['rustc']
{{/rust}}


{{#dotnet}}
let g:syntastic_cs_checkers = ['syntax', 'semantic', 'issues']
{{/dotnet}}

